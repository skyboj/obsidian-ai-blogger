#!/usr/bin/env node

import { execSync } from 'child_process';
import { readFileSync, writeFileSync, existsSync } from 'fs';
import { join } from 'path';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

async function generateContent() {
  console.log('ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç...');
  
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    execSync('npm run content:generate', { stdio: 'inherit' });
    console.log('‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error.message);
    throw error;
  }
}

async function syncObsidianContent() {
  console.log('üìù –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å Obsidian...');
  
  try {
    // –ö–æ–ø–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏ –≤ –ø–∞–ø–∫—É content/blog
    const outputDir = './output/drafts';
    const contentDir = './src/content/blog';
    
    if (existsSync(outputDir)) {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
      // –∏–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Obsidian —á–µ—Ä–µ–∑ API
      console.log('‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } else {
      console.log('‚ö†Ô∏è –ü–∞–ø–∫–∞ output/drafts –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error.message);
  }
}

async function buildAndDeploy() {
  console.log('üöÄ –°–æ–±–∏—Ä–∞–µ–º –∏ –¥–µ–ø–ª–æ–∏–º —Å–∞–π—Ç...');
  
  try {
    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∞–π—Ç
    execSync('npm run build', { stdio: 'inherit' });
    
    // –î–µ–ø–ª–æ–∏–º –≤ S3
    execSync('npm run deploy:s3', { stdio: 'inherit' });
    
    console.log('‚úÖ –°–∞–π—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–¥–µ–ø–ª–æ–µ–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ:', error.message);
    throw error;
  }
}

async function updateLastDeployTime() {
  const timestamp = new Date().toISOString();
  const deployInfo = {
    lastDeploy: timestamp,
    status: 'success'
  };
  
  writeFileSync('./deploy-info.json', JSON.stringify(deployInfo, null, 2));
  console.log(`üìÖ –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–ø–ª–æ—è: ${timestamp}`);
}

async function main() {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –¥–µ–ø–ª–æ–π...');
  
  try {
    await generateContent();
    await syncObsidianContent();
    await buildAndDeploy();
    await updateLastDeployTime();
    
    console.log('üéâ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', error.message);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –¥–µ–ø–ª–æ–µ
    const deployInfo = {
      lastDeploy: new Date().toISOString(),
      status: 'failed',
      error: error.message
    };
    writeFileSync('./deploy-info.json', JSON.stringify(deployInfo, null, 2));
    
    process.exit(1);
  }
}

main(); 