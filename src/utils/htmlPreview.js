import { marked } from 'marked';
import { writeFile, mkdir } from 'fs/promises';
import { join } from 'path';
import { logger } from './logger.js';

const previewsDir = join(process.cwd(), 'temp', 'previews');

// Ensure previews directory exists
async function ensurePreviewsDir() {
    try {
        await mkdir(previewsDir, { recursive: true });
    } catch (error) {
        // Directory might already exist, that's fine
    }
}

export const createHtmlPreview = async (title, markdownContent) => {
    try {
        await ensurePreviewsDir();
        
        // Convert markdown to HTML
        const htmlContent = await marked(markdownContent);
        
        // Create a simple HTML page
        const fullHtml = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${title}</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            line-height: 1.6;
            color: #333;
        }
        h1, h2, h3 { color: #2c3e50; }
        pre { background: #f4f4f4; padding: 15px; border-radius: 5px; overflow-x: auto; }
        blockquote { border-left: 4px solid #3498db; margin: 0; padding-left: 20px; color: #666; }
        img { max-width: 100%; height: auto; }
        table { border-collapse: collapse; width: 100%; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
    </style>
</head>
<body>
    <h1>${title}</h1>
    ${htmlContent}
    <footer style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #eee; color: #666; font-size: 14px;">
        Generated by Obsidian Blogger
    </footer>
</body>
</html>`;

        // Create a unique filename
        const fileName = `${Date.now()}-${title.replace(/[^a-z0-9]/gi, '-').toLowerCase()}.html`;
        const filePath = join(previewsDir, fileName);
        
        // Save the HTML file
        await writeFile(filePath, fullHtml, 'utf8');
        
        // Return the local file path (we can serve this via a simple HTTP server)
        logger.success(`‚úÖ HTML preview created: ${fileName}`);
        return `file://${filePath}`;
        
    } catch (error) {
        logger.error(`‚ùå Could not create HTML preview: ${error.message}`);
        return null;
    }
};

export const cleanupOldPreviews = async () => {
    try {
        const { readdir, unlink, stat } = await import('fs/promises');
        const files = await readdir(previewsDir);
        const now = Date.now();
        const maxAge = 24 * 60 * 60 * 1000; // 24 hours
        
        for (const file of files) {
            const filePath = join(previewsDir, file);
            const stats = await stat(filePath);
            
            if (now - stats.mtime.getTime() > maxAge) {
                await unlink(filePath);
                logger.info(`üóëÔ∏è Cleaned up old preview: ${file}`);
            }
        }
    } catch (error) {
        logger.warn(`Could not cleanup old previews: ${error.message}`);
    }
}; 