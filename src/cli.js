#!/usr/bin/env node

import 'dotenv/config';
import { createAIManager } from './ai/index.js';
import { loadConfig } from './utils/config.js';
import { logger } from './utils/logger.js';

async function main() {
    const args = process.argv.slice(2);
    
    if (args.length === 0) {
        console.log(`
ü§ñ Content Generator CLI

Usage:
  npm run content:generate "Article topic"
  node src/cli.js "Artificial Intelligence in 2024"

Options:
  --provider <name>    Choose AI provider (openai)
  --model <name>       Model for generation
  --help               Show this help
        `);
        process.exit(0);
    }

    if (args.includes('--help')) {
        showHelp();
        process.exit(0);
    }

    try {
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const config = await loadConfig();
        const aiManager = createAIManager(config.ai);

        // –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        const topic = args.find(arg => !arg.startsWith('--')) || args[0];
        const provider = getArgValue(args, '--provider');
        const model = getArgValue(args, '--model');

        if (!topic) {
            logger.error('‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
            process.exit(1);
        }

        logger.info(`üéØ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Ç–µ–º—É: "${topic}"`);
        
        if (provider) {
            logger.info(`üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${provider}`);
        }

        // Check –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        const healthChecks = await aiManager.checkProvidersHealth();
        logger.info('üè• –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:');
        healthChecks.forEach(check => {
            const status = check.available ? '‚úÖ' : '‚ùå';
            logger.info(`  ${status} ${check.name}: ${check.status} (${check.responseTime}ms)`);
        });

        // Creating –ø—Ä–æ—Å—Ç–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        const prompt = `–ù–∞–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ —Ç–µ–º—É: ${topic}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –û–±—ä–µ–º: 1500-2000 —Å–ª–æ–≤
- –Ø–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π
- –°—Ç–∏–ª—å: –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –≤–≤–µ–¥–µ–Ω–∏–µ, –æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å, –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
- –í–∫–ª—é—á–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã

–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ - –æ–Ω –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ.`;

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        const result = await aiManager.generate(prompt, {
            provider,
            model
        });

        if (result.success) {
            logger.success('‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!');
            
            console.log('\n' + '='.repeat(80));
            console.log('üìù –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ô –ö–û–ù–¢–ï–ù–¢:');
            console.log('='.repeat(80));
            console.log(result.content);
            console.log('='.repeat(80));
            
            console.log('\nüìä –ú–ï–¢–ê–î–ê–ù–ù–´–ï:');
            console.log(`‚Ä¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: ${result.provider}`);
            console.log(`‚Ä¢ –ú–æ–¥–µ–ª—å: ${result.metadata.model || 'N/A'}`);
            console.log(`‚Ä¢ –¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${result.metadata.tokensUsed || 'N/A'}`);
            console.log(`‚Ä¢ –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${result.metadata.timestamp}`);
            
            // –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            if (result.metadata.promptTokens && result.metadata.completionTokens) {
                const cost = await aiManager.estimateGenerationCost(prompt, provider);
                if (cost) {
                    console.log(`‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: $${cost.totalCost.toFixed(6)} ${cost.currency}`);
                }
            }
            
        } else {
            logger.error(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${result.message}`);
            if (result.lastError) {
                logger.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', result.lastError);
            }
            process.exit(1);
        }

    } catch (error) {
        logger.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    }
}

function getArgValue(args, flag) {
    const index = args.indexOf(flag);
    return index !== -1 && index + 1 < args.length ? args[index + 1] : null;
}

function showHelp() {
    console.log(`
ü§ñ Content Generator CLI - –°–ø—Ä–∞–≤–∫–∞

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
  npm run generate "–¢–µ–º–∞ —Å—Ç–∞—Ç—å–∏"
  node src/cli.js "–¢–µ–º–∞" [–æ–ø—Ü–∏–∏]

–ü–†–ò–ú–ï–†–´:
  npm run generate "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –≤ –º–µ–¥–∏—Ü–∏–Ω–µ"
  node src/cli.js "–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤ 2024" --provider openai
  node src/cli.js "–ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ" --provider openai --model gpt-4o-mini

–û–ü–¶–ò–ò:
  --provider <name>    –í—ã–±–æ—Ä AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                       –î–æ—Å—Ç—É–ø–Ω—ã–µ: openai
                       –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

  --model <name>       –ú–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                       OpenAI: gpt-4o-mini, gpt-4o, gpt-3.5-turbo

  --help              –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø:
  –°–∫–æ–ø–∏—Ä—É–π—Ç–µ env.example –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ:
  ‚Ä¢ OPENAI_API_KEY      - –ö–ª—é—á OpenAI API

–ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:
  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ config/bot.yaml, —Å–µ–∫—Ü–∏—è ai:
  ‚Ä¢ default_provider    - –ü—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  ‚Ä¢ providers          - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    `);
}

// –ó–∞–ø—É—Å–∫ CLI –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
    main().catch(error => {
        logger.error('CLI failed:', error);
        process.exit(1);
    });
} 