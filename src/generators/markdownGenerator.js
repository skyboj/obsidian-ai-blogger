import { writeFile, mkdir, readFile } from 'fs/promises';
import { join, dirname, resolve } from 'path';
import matter from 'gray-matter';
import slugify from 'slugify';
import { logger } from '../utils/logger.js';

/**
 * Markdown File Generator
 */
export class MarkdownGenerator {
    constructor(outputDir = './output') {
        this.outputDir = resolve(process.cwd(), outputDir);
    }

    /**
     * Create Markdown file from content
     */
    async generateMarkdownFile(options) {
        const {
            title,
            content,
            frontmatter = {},
            filename = null,
            subfolder = null
        } = options;

        try {
            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
            const finalFilename = filename || this.generateFilename(title);
            
            // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ frontmatter
            const finalFrontmatter = this.prepareFrontmatter(title, frontmatter);
            
            // Creating –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å frontmatter
            const markdownContent = this.buildMarkdownContent(finalFrontmatter, content);
            
            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            const outputPath = this.getOutputPath(finalFilename, subfolder);
            
            // Creating –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            await this.ensureDirectoryExists(dirname(outputPath));
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            await writeFile(outputPath, markdownContent, 'utf8');
            
            logger.success(`üìÑ Markdown file created: ${outputPath}`);
            
            return {
                success: true,
                filename: finalFilename,
                path: outputPath,
                size: markdownContent.length,
                frontmatter: finalFrontmatter
            };
            
        } catch (error) {
            logger.error('Failed to generate markdown file:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
     */
    generateFilename(title) {
        const baseFilename = slugify(title, {
            lower: true,
            strict: true,
            locale: 'ru'
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        const date = new Date().toISOString().split('T')[0];
        
        return `${date}-${baseFilename}.md`;
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ frontmatter —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
     */
    prepareFrontmatter(title, userFrontmatter = {}) {
        const currentDate = new Date().toISOString().split('T')[0];
        
        const defaultFrontmatter = {
            title,
            description: '',
            publish: false, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç–∞—Ç—å–∏ –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∞—Ö
            created_date: currentDate,
            tags: [],
            featured_image: '',
            slug: ''
        };

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º frontmatter
        const finalFrontmatter = {
            ...defaultFrontmatter,
            ...userFrontmatter,
            title // Title –≤—Å–µ–≥–¥–∞ –±–µ—Ä–µ–º –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        };

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º slug –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        if (!finalFrontmatter.slug) {
            finalFrontmatter.slug = slugify(title, {
                lower: true,
                strict: true,
                locale: 'ru'
            });
        }

        return finalFrontmatter;
    }

    /**
     * Creating –ø–æ–ª–Ω–æ–≥–æ Markdown –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å frontmatter
     */
    buildMarkdownContent(frontmatter, content) {
        // `matter.stringify` –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç frontmatter –∏ –∫–æ–Ω—Ç–µ–Ω—Ç
        return matter.stringify(content, frontmatter);
    }

    /**
     * Getting –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     */
    getOutputPath(filename, subfolder = null) {
        if (subfolder) {
            return join(this.outputDir, subfolder, filename);
        }
        return join(this.outputDir, filename);
    }

    /**
     * Creating –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
     */
    async ensureDirectoryExists(dirPath) {
        try {
            await mkdir(dirPath, { recursive: true });
        } catch (error) {
            if (error.code !== 'EEXIST') {
                throw error;
            }
        }
    }

    /**
     * Creating —á–µ—Ä–Ω–æ–≤–∏–∫–∞ —Å—Ç–∞—Ç—å–∏
     */
    async createDraft(title, content, frontmatter = {}) {
        const draftFrontmatter = {
            ...frontmatter,
            publish: false,
            draft: true
        };

        return this.generateMarkdownFile({
            title,
            content,
            frontmatter: draftFrontmatter,
            subfolder: 'drafts'
        });
    }

    /**
     * Creating –≥–æ—Ç–æ–≤–æ–π —Å—Ç–∞—Ç—å–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
     */
    async createArticle(title, content, frontmatter = {}) {
        const articleFrontmatter = {
            ...frontmatter,
            publish: true,
            draft: false
        };

        return this.generateMarkdownFile({
            title,
            content,
            frontmatter: articleFrontmatter
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
     */
    async updateMarkdownFile(filePath, newContent, newFrontmatter = null) {
        try {
            // –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
            const existingContent = await readFile(filePath, 'utf8');
            const parsed = matter(existingContent);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º frontmatter –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
            const finalFrontmatter = newFrontmatter 
                ? { ...parsed.data, ...newFrontmatter }
                : parsed.data;
            
            // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            const updatedContent = this.buildMarkdownContent(finalFrontmatter, newContent);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            await writeFile(filePath, updatedContent, 'utf8');
            
            logger.success(`üìù Updated markdown file: ${filePath}`);
            
            return {
                success: true,
                path: filePath,
                frontmatter: finalFrontmatter
            };
            
        } catch (error) {
            logger.error('Failed to update markdown file:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    /**
     * Getting –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞
     */
    async getFileMetadata(filePath) {
        try {
            const content = await readFile(filePath, 'utf8');
            const parsed = matter(content);
            
            return {
                frontmatter: parsed.data,
                content: parsed.content,
                wordCount: this.countWords(parsed.content),
                charCount: parsed.content.length,
                readingTime: this.estimateReadingTime(parsed.content)
            };
            
        } catch (error) {
            logger.error('Failed to read file metadata:', error);
            return null;
        }
    }

    /**
     * –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤
     */
    countWords(text) {
        return text.trim().split(/\s+/).filter(word => word.length > 0).length;
    }

    /**
     * –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —á—Ç–µ–Ω–∏—è
     */
    estimateReadingTime(text) {
        const wordsPerMinute = 200; // –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è
        const wordCount = this.countWords(text);
        const minutes = Math.ceil(wordCount / wordsPerMinute);
        
        return {
            minutes,
            words: wordCount,
            text: minutes === 1 ? '1 –º–∏–Ω—É—Ç–∞' : `${minutes} –º–∏–Ω—É—Ç`
        };
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è frontmatter
     */
    validateFrontmatter(frontmatter) {
        const requiredFields = ['title'];
        const errors = [];
        
        for (const field of requiredFields) {
            if (!frontmatter[field]) {
                errors.push(`Missing required field: ${field}`);
            }
        }
        
        // Check —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        if (frontmatter.tags && !Array.isArray(frontmatter.tags)) {
            errors.push('Tags must be an array');
        }
        
        if (frontmatter.publish && typeof frontmatter.publish !== 'boolean') {
            errors.push('Publish must be a boolean');
        }
        
        return {
            isValid: errors.length === 0,
            errors
        };
    }

    /**
     * Creating —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
     */
    async createBackup(filePath) {
        try {
            const content = await readFile(filePath, 'utf8');
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            const backupPath = `${filePath}.backup.${timestamp}`;
            
            await writeFile(backupPath, content, 'utf8');
            
            logger.info(`üìã Backup created: ${backupPath}`);
            return backupPath;
            
        } catch (error) {
            logger.error('Failed to create backup:', error);
            return null;
        }
    }
} 