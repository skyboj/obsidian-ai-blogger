import { OpenAIProvider } from './openaiProvider.js';
import { logger } from '../utils/logger.js';

/**
 * AI Providers Manager
 */
export class AIManager {
    constructor(config) {
        this.config = config;
        this.providers = new Map();
        this.defaultProvider = config.default_provider || 'openai';
        
        this.initializeProviders();
    }

    /**
     * Initialize all available providers
     */
    initializeProviders() {
        const providers = this.config.providers || {};

        // OpenAI Provider
        if (providers.openai && process.env.OPENAI_API_KEY) {
            try {
                const openaiProvider = new OpenAIProvider({
                    apiKey: process.env.OPENAI_API_KEY,
                    ...providers.openai
                });
                this.providers.set('openai', openaiProvider);
                logger.info('‚úÖ OpenAI provider initialized');
            } catch (error) {
                logger.error('‚ùå Failed to initialize OpenAI provider:', error);
            }
        }



        // TODO: –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        // - Google (Gemini)
        // - Local models (Ollama)

        if (this.providers.size === 0) {
            logger.warn('‚ö†Ô∏è No AI providers available');
        } else {
            logger.success(`ü§ñ Initialized ${this.providers.size} AI provider(s)`);
        }
    }

    /**
     * Getting –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏
     */
    getProvider(providerName = null) {
        const name = providerName || this.defaultProvider;
        const provider = this.providers.get(name);
        
        if (!provider) {
            throw new Error(`AI provider '${name}' not found or not initialized`);
        }
        
        return provider;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å fallback –Ω–∞ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
     */
    async generate(prompt, options = {}) {
        const preferredProvider = options.provider || this.defaultProvider;
        const maxRetries = options.maxRetries || 2;
        
        logger.info(`üß† Starting content generation with provider: ${preferredProvider}`);

        // –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è –ø–æ–ø—ã—Ç–æ–∫ (–Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–≥–æ)
        const providerNames = [preferredProvider, ...this.getAvailableProviders()]
            .filter((name, index, arr) => arr.indexOf(name) === index) // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            .slice(0, maxRetries + 1);

        let lastError = null;

        for (const providerName of providerNames) {
            try {
                const provider = this.getProvider(providerName);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                if (!(await provider.isAvailable())) {
                    logger.warn(`Provider ${providerName} is not available, skipping...`);
                    continue;
                }

                logger.info(`üîÑ Attempting generation with ${providerName}...`);
                
                const result = await provider.generate(prompt, options);
                
                if (result.success) {
                    logger.success(`‚úÖ Content generated successfully with ${providerName}`);
                    return result;
                } else {
                    logger.warn(`‚ùå Generation failed with ${providerName}:`, result.message);
                    lastError = result;
                }

            } catch (error) {
                logger.error(`üí• Error with provider ${providerName}:`, error);
                lastError = error;
                continue;
            }
        }

        // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
        logger.error('üí• All AI providers failed');
        return {
            success: false,
            error: 'ALL_PROVIDERS_FAILED',
            message: '–í—Å–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
            lastError: lastError
        };
    }

    /**
     * Getting —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
     */
    getAvailableProviders() {
        return Array.from(this.providers.keys());
    }

    /**
     * Check –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
     */
    async checkProvidersHealth() {
        const healthChecks = [];
        
        for (const [name, provider] of this.providers.entries()) {
            const start = Date.now();
            try {
                const isAvailable = await provider.isAvailable();
                const responseTime = Date.now() - start;
                
                healthChecks.push({
                    name,
                    available: isAvailable,
                    responseTime,
                    status: isAvailable ? 'healthy' : 'unavailable'
                });
            } catch (error) {
                healthChecks.push({
                    name,
                    available: false,
                    responseTime: Date.now() - start,
                    status: 'error',
                    error: error.message
                });
            }
        }
        
        return healthChecks;
    }

    /**
     * Getting —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
     */
    getUsageStats() {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–∫–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        return {
            totalRequests: 0,
            successfulRequests: 0,
            failedRequests: 0,
            averageResponseTime: 0,
            providersUsage: {}
        };
    }

    /**
     * –û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
     */
    async estimateGenerationCost(prompt, providerName = null) {
        try {
            const provider = this.getProvider(providerName);
            
            if (typeof provider.estimateCost === 'function') {
                const promptTokens = provider.estimateTokens(prompt);
                const estimatedCompletionTokens = Math.min(
                    provider.maxTokens || 4000,
                    promptTokens * 2 // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –≤ 2 —Ä–∞–∑–∞ –∫–æ—Ä–æ—á–µ –ø—Ä–æ–º–ø—Ç–∞
                );
                
                return provider.estimateCost(promptTokens, estimatedCompletionTokens);
            }
            
            return null;
        } catch (error) {
            logger.error('Failed to estimate cost:', error);
            return null;
        }
    }

    /**
     * Getting –ª—É—á—à–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è –∑–∞–¥–∞—á–∏
     */
    async getBestProvider(prompt, requirements = {}) {
        const availableProviders = this.getAvailableProviders();
        
        if (availableProviders.length === 0) {
            throw new Error('No AI providers available');
        }

        // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
        if (requirements.cost === 'low') {
            // –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –±–æ–ª–µ–µ –¥–µ—à–µ–≤—ã–µ –º–æ–¥–µ–ª–∏
            return availableProviders.includes('openai') ? 'openai' : availableProviders[0];
        }

        if (requirements.quality === 'high') {
            // –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
            return availableProviders.includes('openai') ? 'openai' : availableProviders[0];
        }

        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        return availableProviders.includes(this.defaultProvider) 
            ? this.defaultProvider 
            : availableProviders[0];
    }
} 