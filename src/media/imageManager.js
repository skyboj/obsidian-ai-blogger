import { UnsplashProvider } from './unsplashProvider.js';
import { logger } from '../utils/logger.js';

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
export class ImageManager {
    constructor(config) {
        this.config = config;
        this.providers = new Map();
        this.defaultProvider = config.provider || 'unsplash';
        
        this.initializeProviders();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
     */
    initializeProviders() {
        const providers = this.config || {};

        // Unsplash Provider
        if (process.env.UNSPLASH_ACCESS_KEY) {
            try {
                const unsplashProvider = new UnsplashProvider({
                    apiKey: process.env.UNSPLASH_ACCESS_KEY,
                    orientation: providers.orientation || 'landscape',
                    size: providers.size || 'regular',
                    perPage: providers.perPage || 10
                });
                this.providers.set('unsplash', unsplashProvider);
                logger.info('‚úÖ Unsplash provider initialized');
            } catch (error) {
                logger.error('‚ùå Failed to initialize Unsplash provider:', error);
            }
        } else {
            logger.warn('‚ö†Ô∏è Unsplash API key not found, skipping initialization');
        }

        // TODO: –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
        // - Pexels
        // - Pixabay
        // - Getty Images

        if (this.providers.size === 0) {
            logger.warn('‚ö†Ô∏è No image providers available');
        } else {
            logger.success(`üñºÔ∏è Initialized ${this.providers.size} image provider(s)`);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏
     */
    getProvider(providerName = null) {
        const name = providerName || this.defaultProvider;
        const provider = this.providers.get(name);
        
        if (!provider) {
            throw new Error(`Image provider '${name}' not found or not initialized`);
        }
        
        return provider;
    }

    /**
     * –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å fallback –Ω–∞ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
     */
    async searchImages(keywords, options = {}) {
        const preferredProvider = options.provider || this.defaultProvider;
        const maxRetries = options.maxRetries || 2;
        
        logger.info(`üñºÔ∏è Searching images for: ${Array.isArray(keywords) ? keywords.join(', ') : keywords}`);

        // –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è –ø–æ–ø—ã—Ç–æ–∫
        const providerNames = [preferredProvider, ...this.getAvailableProviders()]
            .filter((name, index, arr) => arr.indexOf(name) === index) // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            .slice(0, maxRetries + 1);

        let lastError = null;

        for (const providerName of providerNames) {
            try {
                const provider = this.getProvider(providerName);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                if (!(await provider.isAvailable())) {
                    logger.warn(`Image provider ${providerName} is not available, skipping...`);
                    continue;
                }

                logger.info(`üîÑ Attempting image search with ${providerName}...`);
                
                const result = await provider.searchImages(keywords, options);
                
                if (result.success && result.images.length > 0) {
                    logger.success(`‚úÖ Found ${result.images.length} images with ${providerName}`);
                    return result;
                } else {
                    logger.warn(`‚ùå No images found with ${providerName}`);
                    lastError = result;
                }

            } catch (error) {
                logger.error(`üí• Error with image provider ${providerName}:`, error);
                lastError = error;
                continue;
            }
        }

        // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
        logger.error('üí• All image providers failed');
        return {
            success: false,
            error: 'ALL_PROVIDERS_FAILED',
            message: '–í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
            lastError: lastError
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ–º—ã
     */
    async getBestImageForTopic(topic, options = {}) {
        try {
            // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
            const keywords = this.generateSearchKeywords(topic);
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            const searchOptions = {
                ...options,
                limit: options.limit || 5,
                orientation: options.orientation || 'landscape',
                filters: {
                    minWidth: options.minWidth || 800,
                    minHeight: options.minHeight || 600,
                    orientation: options.orientation || 'landscape',
                    ...options.filters
                },
                sortBy: 'relevance'
            };

            const result = await this.searchImages(keywords, searchOptions);
            
            if (result.success && result.images.length > 0) {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—É—á—à–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø–µ—Ä–≤–æ–µ –≤ —Å–ø–∏—Å–∫–µ)
                const bestImage = result.images[0];
                
                logger.success(`üéØ Selected best image: ${bestImage.title || bestImage.id}`);
                
                return {
                    success: true,
                    image: bestImage,
                    alternatives: result.images.slice(1),
                    searchKeywords: keywords,
                    metadata: result.metadata
                };
            }

            return {
                success: false,
                error: 'NO_SUITABLE_IMAGES',
                message: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–µ–º—ã'
            };

        } catch (error) {
            logger.error('Failed to get best image for topic:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º—ã
     */
    generateSearchKeywords(topic) {
        const baseKeywords = [topic];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã
        const topicLower = topic.toLowerCase();
        
        if (topicLower.includes('—Ç–µ—Ö–Ω–æ–ª–æ–≥') || topicLower.includes('ai') || topicLower.includes('–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç')) {
            baseKeywords.push('technology', 'artificial intelligence', 'innovation');
        } else if (topicLower.includes('–∑–¥–æ—Ä–æ–≤') || topicLower.includes('–º–µ–¥–∏—Ü–∏–Ω')) {
            baseKeywords.push('health', 'medical', 'wellness');
        } else if (topicLower.includes('–±–∏–∑–Ω–µ—Å') || topicLower.includes('—Ñ–∏–Ω–∞–Ω—Å')) {
            baseKeywords.push('business', 'finance', 'success');
        } else if (topicLower.includes('–æ–±—Ä–∞–∑–æ–≤–∞–Ω') || topicLower.includes('–æ–±—É—á–µ–Ω')) {
            baseKeywords.push('education', 'learning', 'study');
        } else if (topicLower.includes('–ø—Ä–∏—Ä–æ–¥') || topicLower.includes('—ç–∫–æ–ª–æ–≥–∏')) {
            baseKeywords.push('nature', 'environment', 'ecology');
        } else {
            // –û–±—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            baseKeywords.push('concept', 'abstract', 'modern');
        }
        
        return baseKeywords;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    async getRandomImage(options = {}) {
        try {
            const provider = this.getProvider(options.provider);
            
            if (typeof provider.getRandomImage === 'function') {
                return await provider.getRandomImage(options);
            } else {
                // Fallback: –ø–æ–∏—Å–∫ —Å –æ–±—â–∏–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
                return await this.searchImages(['abstract', 'concept'], {
                    ...options,
                    limit: 1
                });
            }
            
        } catch (error) {
            logger.error('Failed to get random image:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
     */
    getAvailableProviders() {
        return Array.from(this.providers.keys());
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
     */
    async checkProvidersHealth() {
        const healthChecks = [];
        
        for (const [name, provider] of this.providers.entries()) {
            const start = Date.now();
            try {
                const isAvailable = await provider.isAvailable();
                const responseTime = Date.now() - start;
                
                healthChecks.push({
                    name,
                    available: isAvailable,
                    responseTime,
                    status: isAvailable ? 'healthy' : 'unavailable'
                });
            } catch (error) {
                healthChecks.push({
                    name,
                    available: false,
                    responseTime: Date.now() - start,
                    status: 'error',
                    error: error.message
                });
            }
        }
        
        return healthChecks;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
     */
    getUsageStats() {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–∫–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        return {
            totalSearches: 0,
            successfulSearches: 0,
            failedSearches: 0,
            averageResponseTime: 0,
            providersUsage: {}
        };
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å—Ç–∞—Ç—å–µ
     */
    formatImageForArticle(image, options = {}) {
        const size = options.size || 'regular';
        const includeAttribution = options.includeAttribution !== false;
        
        const provider = this.providers.get(image.source?.toLowerCase());
        const imageUrl = provider?.getImageUrl ? 
            provider.getImageUrl(image, size) : 
            image.url;

        const result = {
            url: imageUrl,
            alt: image.title || image.description || 'Article image',
            title: image.title,
            width: image.width,
            height: image.height
        };

        if (includeAttribution && provider?.getAttributionText) {
            result.attribution = provider.getAttributionText(image);
            result.attributionHtml = provider.getAttributionHtml ? 
                provider.getAttributionHtml(image) : 
                result.attribution;
        }

        return result;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ Markdown –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    createImageMarkdown(image, options = {}) {
        const formatted = this.formatImageForArticle(image, options);
        
        let markdown = `![${formatted.alt}](${formatted.url})`;
        
        if (formatted.title) {
            markdown = `![${formatted.alt}](${formatted.url} "${formatted.title}")`;
        }

        if (options.includeAttribution && formatted.attribution) {
            markdown += `\n\n*${formatted.attribution}*`;
        }

        return markdown;
    }
} 